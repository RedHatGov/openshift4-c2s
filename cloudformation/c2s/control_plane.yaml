AWSTemplateFormatVersion: 2010-09-09
Description: Template for OpenShift Cluster Node Launch (EC2 master instances)

Parameters:
  InfrastructureName:
    AllowedPattern: ^([a-zA-Z][a-zA-Z0-9\-]{0,26})$
    MaxLength: 27
    MinLength: 1
    ConstraintDescription: >-
      Infrastructure name must be alphanumeric, start with a letter, and have
      a maximum of 27 characters.
    Description: >-
      A short, unique cluster ID used to tag cloud resources and identify items
      owned or used by the cluster. You should use the value generated when
      creating the manifest files using `openshift-install create manifests`.
    Type: String

  RhcosAmi:
    Description: >-
      Current Red Hat Enterprise Linux CoreOS AMI to use for bootstrap.
    Type: AWS::EC2::Image::Id

#  AutoRegisterELB:
#    AllowedValues:
#      - "yes"
#      - "no"
#    Description: >-
#      Do you want to invoke NLB registration, which requires a Lambda ARN parameter?
#    Default: "yes"
#    Type: String

  Master0Subnet:
    Description: >-
      The subnet to launch the first master node into.
    Type: AWS::EC2::Subnet::Id

  Master1Subnet:
    Description: >-
      The subnet to launch the second master node into.
    Type: AWS::EC2::Subnet::Id

  Master2Subnet:
    Description: >-
      The subnet to launch the third master node into.
    Type: AWS::EC2::Subnet::Id

  MasterSecurityGroupId:
    Description: >-
      The master security group ID.
    Type: AWS::EC2::SecurityGroup::Id

  IgnitionLocation:
    Description: >-
      Ignition config file location, such as
      https://api-int.$CLUSTER_NAME.$DOMAIN:22623/config/master
    Type: String

  IgnitionVersion:
    Description: >-
      Ignition version
    Type: String

#  CertificateAuthorities:
#    Description: >-
#      Base64 encoded certificate authority string to use, such as
#      data:text/plain;charset=utf-8;base64,ABC...xYz==. You should use the
#      value generated when creating the ignition config files using
#      `openshift-install create ignition-configs`.
#    Type: String

  MasterInstanceProfileName:
    Description: >-
      IAM profile to associate with master nodes.
    Type: String

  MasterInstanceType:
    AllowedValues:
      - "m4.xlarge"
      - "m4.2xlarge"
      - "m4.4xlarge"
      - "m4.8xlarge"
      - "m4.10xlarge"
      - "m4.16xlarge"
      - "c4.2xlarge"
      - "c4.4xlarge"
      - "c4.8xlarge"
      - "r4.xlarge"
      - "r4.2xlarge"
      - "r4.4xlarge"
      - "r4.8xlarge"
      - "r4.16xlarge"
      - "m5.xlarge"
      - "m5.2xlarge"
      - "m5.4xlarge"
      - "m5.8xlarge"
      - "m5.10xlarge"
      - "m5.16xlarge"
      - "c5.2xlarge"
      - "c5.4xlarge"
      - "c5.8xlarge"
      - "r5.xlarge"
      - "r5.2xlarge"
      - "r5.4xlarge"
      - "r5.8xlarge"
      - "r5.16xlarge"
    Default: m5.xlarge
    Type: String

#  RegisterNlbIpTargetsLambdaArn:
#    Description: >-
#      ARN for NLB IP target registration lambda.
#    Type: String

#  ExternalApiTargetGroupArn:
#    Description: >-
#      ARN for external API load balancer target group.
#    Type: String

#  InternalApiTargetGroupArn:
#    Description: >-
#      ARN for internal API load balancer target group.
#    Type: String

#  InternalServiceTargetGroupArn:
#    Description: >-
#      ARN for internal service load balancer target group.
#    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Cluster Information"
        Parameters:
          - InfrastructureName
      - Label:
          default: "Host Information"
        Parameters:
          - MasterInstanceType
          - RhcosAmi
          - IgnitionLocation
          - IgnitionVersion
#          - CertificateAuthorities
          - MasterSecurityGroupId
          - MasterInstanceProfileName
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - AllowedBootstrapSshCidr
          - Master0Subnet
          - Master1Subnet
          - Master2Subnet
#      - Label:
#          default: "Load Balancer Automation"
#        Parameters:
#          - AutoRegisterELB
#          - RegisterNlbIpTargetsLambdaArn
#          - ExternalApiTargetGroupArn
#          - InternalApiTargetGroupArn
#          - InternalServiceTargetGroupArn
    ParameterLabels:
      InfrastructureName:
        default: "Infrastructure Name"
      VpcId:
        default: "VPC ID"
      Master0Subnet:
        default: "Master-0 Subnet"
      Master1Subnet:
        default: "Master-1 Subnet"
      Master2Subnet:
        default: "Master-2 Subnet"
      MasterInstanceType:
        default: "Master Instance Type"
      MasterInstanceProfileName:
        default: "Master Instance Profile Name"
      RhcosAmi:
        default: "Red Hat Enterprise Linux CoreOS AMI ID"
      IgnitionLocation:
        default: "Master Ignition Source"
      IgnitionVersion:
        default: "Ignition version number"
#      CertificateAuthorities:
#        default: "Ignition CA String"
      MasterSecurityGroupId:
        default: "Master Security Group ID"
      AutoRegisterELB:
        default: "Use Provided ELB Automation"

#Conditions:
#  DoRegistration: !Equals ["yes", !Ref AutoRegisterELB]

Resources:
  Master0:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref RhcosAmi
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: "120"
          VolumeType: "gp2"
      IamInstanceProfile: !Ref MasterInstanceProfileName
      InstanceType: !Ref MasterInstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: "false"
          DeviceIndex: "0"
          GroupSet:
            - !Ref "MasterSecurityGroupId"
          SubnetId: !Ref "Master0Subnet"
      UserData:
        Fn::Base64: !Sub [
          '{"ignition":{"config":{"replace":{"source":"${S3Loc}","verification":{}}},"timeouts":{},"version":"${IGN_VER}"},"networkd":{},"passwd":{},"storage":{},"systemd":{}}',
          {
            S3Loc: !Ref IgnitionLocation,
            IGN_VER: !Ref IgnitionVersion
          }
        ]
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref InfrastructureName, "master", "0"]]
        - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
          Value: "owned"

#  RegisterMaster0:
#    Condition: DoRegistration
#    Type: Custom::NLBRegister
#    Properties:
#      ServiceToken: !Ref RegisterNlbIpTargetsLambdaArn
#      TargetArn: !Ref ExternalApiTargetGroupArn
#      TargetIp: !GetAtt Master0.PrivateIp

#  RegisterMaster0InternalApiTarget:
#    Condition: DoRegistration
#    Type: Custom::NLBRegister
#    Properties:
#      ServiceToken: !Ref RegisterNlbIpTargetsLambdaArn
#      TargetArn: !Ref InternalApiTargetGroupArn
#      TargetIp: !GetAtt Master0.PrivateIp

#  RegisterMaster0InternalServiceTarget:
#    Condition: DoRegistration
#    Type: Custom::NLBRegister
#    Properties:
#      ServiceToken: !Ref RegisterNlbIpTargetsLambdaArn
#      TargetArn: !Ref InternalServiceTargetGroupArn
#      TargetIp: !GetAtt Master0.PrivateIp

  Master1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref RhcosAmi
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: "120"
            VolumeType: "gp2"
      IamInstanceProfile: !Ref MasterInstanceProfileName
      InstanceType: !Ref MasterInstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: "false"
          DeviceIndex: "0"
          GroupSet:
            - !Ref "MasterSecurityGroupId"
          SubnetId: !Ref "Master1Subnet"
      UserData:
        Fn::Base64: !Sub [
          '{"ignition":{"config":{"replace":{"source":"${S3Loc}","verification":{}}},"timeouts":{},"version":"${IGN_VER}"},"networkd":{},"passwd":{},"storage":{},"systemd":{}}',
          {
            S3Loc: !Ref IgnitionLocation,
            IGN_VER: !Ref IgnitionVersion
          }
        ]
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref InfrastructureName, "master", "1"]]
        - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
          Value: "owned"

#  RegisterMaster1:
#    Condition: DoRegistration
#    Type: Custom::NLBRegister
#    Properties:
#      ServiceToken: !Ref RegisterNlbIpTargetsLambdaArn
#      TargetArn: !Ref ExternalApiTargetGroupArn
#      TargetIp: !GetAtt Master1.PrivateIp

#  RegisterMaster1InternalApiTarget:
#    Condition: DoRegistration
#    Type: Custom::NLBRegister
#    Properties:
#      ServiceToken: !Ref RegisterNlbIpTargetsLambdaArn
#      TargetArn: !Ref InternalApiTargetGroupArn
#      TargetIp: !GetAtt Master1.PrivateIp

#  RegisterMaster1InternalServiceTarget:
#    Condition: DoRegistration
#    Type: Custom::NLBRegister
#    Properties:
#      ServiceToken: !Ref RegisterNlbIpTargetsLambdaArn
#      TargetArn: !Ref InternalServiceTargetGroupArn
#      TargetIp: !GetAtt Master1.PrivateIp

  Master2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref RhcosAmi
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: "120"
            VolumeType: "gp2"
      IamInstanceProfile: !Ref MasterInstanceProfileName
      InstanceType: !Ref MasterInstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: "false"
          DeviceIndex: "0"
          GroupSet:
            - !Ref "MasterSecurityGroupId"
          SubnetId: !Ref "Master2Subnet"
      UserData:
        Fn::Base64: !Sub [
          '{"ignition":{"config":{"replace":{"source":"${S3Loc}","verification":{}}},"timeouts":{},"version":"${IGN_VER}"},"networkd":{},"passwd":{},"storage":{},"systemd":{}}',
          {
            S3Loc: !Ref IgnitionLocation,
            IGN_VER: !Ref IgnitionVersion
          }
        ]
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref InfrastructureName, "master", "2"]]
        - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
          Value: "owned"

#  RegisterMaster2:
#    Condition: DoRegistration
#    Type: Custom::NLBRegister
#    Properties:
#      ServiceToken: !Ref RegisterNlbIpTargetsLambdaArn
#      TargetArn: !Ref ExternalApiTargetGroupArn
#      TargetIp: !GetAtt Master2.PrivateIp

#  RegisterMaster2InternalApiTarget:
#    Condition: DoRegistration
#    Type: Custom::NLBRegister
#    Properties:
#      ServiceToken: !Ref RegisterNlbIpTargetsLambdaArn
#      TargetArn: !Ref InternalApiTargetGroupArn
#      TargetIp: !GetAtt Master2.PrivateIp

#  RegisterMaster2InternalServiceTarget:
#    Condition: DoRegistration
#    Type: Custom::NLBRegister
#    Properties:
#      ServiceToken: !Ref RegisterNlbIpTargetsLambdaArn
#      TargetArn: !Ref InternalServiceTargetGroupArn
#      TargetIp: !GetAtt Master2.PrivateIp

Outputs:

  Master0PrivateIp:
    Description: The master 0 node private IP address.
    Value: !GetAtt Master0.PrivateIp

  Master1PrivateIp:
    Description: The master 1 node private IP address.
    Value: !GetAtt Master1.PrivateIp

  Master2PrivateIp:
    Description: The master 2 node private IP address.
    Value: !GetAtt Master2.PrivateIp
