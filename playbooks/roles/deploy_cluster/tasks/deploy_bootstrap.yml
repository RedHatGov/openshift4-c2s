---

- name: Get vpc facts
  include_tasks: vpc_facts.yml
  when:
    - (cloudformation_based | bool) and ( not existing_vpc | bool)

- name: Get infra facts
  include_tasks: infra_facts.yml
  when:
    - (cloudformation_based | bool)

- name: Get security facts
  include_tasks: security_facts.yml
  when:
    - (cloudformation_based | bool)

- debug:
    var: internal_api_target_group_arn

- debug:
    var: internal_service_target_group_arn

- name: Get RHCOS AMI ID
  import_role:
    name: generate_ignition
    tasks_from: get_ami_id.yml

- name: Set bootstrap subnet (External)
  set_fact:
    bootstrap_subnet: "{{ ec2_public_subnets[0] }}"
  when:
    - ocp_cluster_publish is match("External")

- name: Set bootstrap subnet (External)
  set_fact:
    bootstrap_subnet: "{{ ec2_private_subnets[0] }}"
  when:
    - ocp_cluster_publish is match("Internal")

- name: Deploy bootstrap Cloudformation stack
  delegate_to: localhost
  amazon.aws.cloudformation:
    aws_access_key: "{{ ansible_env.AWS_ACCESS_KEY_ID | default(omit) }}"
    aws_secret_key: "{{ ansible_env.AWS_SECRET_ACCESS_KEY | default(omit) }}"
    security_token: "{{ ansible_env.AWS_SESSION_TOKEN | default(omit) }}"
    region: "{{ ansible_env.AWS_DEFAULT_REGION | default(omit) }}"
    ec2_url: "{{ cloudformation_endpoint | default(omit) }}"
    validate_certs: "{{ aws_ssl_enabled }}"
    stack_name: "{{ bootstrap_stack_name }}"
    state: present
    disable_rollback: true
    create_timeout: 5
    template: "../cloudformation/c2s/bootstrap.yaml"
    template_parameters:
      #ClusterName: "{{ ocp_cluster_name }}"
      InfrastructureName: "{{ infrastructure_id }}"
      RhcosAmi: "{{ rhcos_ami }}"
      AllowedBootstrapSshCidr: '0.0.0.0/0'
      PublicSubnet: "{{ bootstrap_subnet }}"
      MasterSecurityGroupId: "{{ ec2_sg.master.id }}"
      VpcId: "{{ vpc_id }}"
      BootstrapIgnitionLocation: "http://{{ s3_bucket }}.s3.us-iso-east-1.c2s.ic.gov/{{ s3_path }}/bootstrap.ign"
      BootstrapInstanceProfileName: "{{ ec2_instance_profile.bootstrap }}"
      IgnitionVersion: '3.2.0'
      CreateIAMRoles: "false"
      CreateSecurityGroups: "true"
  register: bootstrap_stack_outputs

- name: Show bootstrap stack output
  debug:
    var: bootstrap_stack_outputs

# Ansible task for this doesn't work correctly in C2S do to some api version error
# This has not been combined with the loop below for the control plane to allow independent deployment of the boostrap node
- name: Add bootstrap node to the api internal target group
  delegate_to: localhost
  shell: aws --no-verify-ssl elbv2 register-targets --target-group-arn "{{ internal_api_target_group_arn }}" --targets '{"Id":"{{ bootstrap_stack_outputs.stack_outputs.BootstrapPrivateIp }}"}'

# Ansible task for this doesn't work correctly in C2S do to some api version error
# This has not been combined with the loop below for the control plane to allow independent deployment of the boostrap node
- name: Add bootstrap node to the service api taget group
  delegate_to: localhost
  shell: aws --no-verify-ssl elbv2 register-targets --target-group-arn "{{ internal_service_target_group_arn }}" --targets '{"Id":"{{ bootstrap_stack_outputs.stack_outputs.BootstrapPrivateIp }}"}'

# Ansible task for this doesn't work correctly in C2S do to some api version error
# This has not been combined with the loop below for the control plane to allow independent deployment of the boostrap node
- name: Add bootstrap node to the api external taget group
  delegate_to: localhost
  shell: aws --no-verify-ssl elbv2 register-targets --target-group-arn "{{ external_api_target_group_arn }}" --targets '{"Id":"{{ bootstrap_stack_outputs.stack_outputs.BootstrapPrivateIp }}"}'
  when:
    (ocp_cluster_publish is match("External"))
