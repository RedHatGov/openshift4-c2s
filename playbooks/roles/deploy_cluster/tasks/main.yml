---

# Get the subnet info so we can grab existing tags
#- name: Get subnet info
#  amazon.aws.ec2_vpc_subnet_info:
#  delegate_to: localhost
#    aws_access_key: "{{ ansible_env.AWS_ACCESS_KEY_ID | default(omit) }}"
#    aws_secret_key: "{{ ansible_env.AWS_SECRET_ACCESS_KEY | default(omit) }}"
#    security_token: "{{ ansible_env.AWS_SESSION_TOKEN | default(omit) }}"
#    region: "{{ aws_region }}"
#    ec2_url: "{{ cloudformation_endpoint }}"
#    validate_certs: "{{ aws_ssl_enabled }}"
#    subnet_ids: "{{ subnets[0].id }}"
#  register: subnet_info

# TODO: Subnets and other existing resources may need to be tagged as well
#- name: Tag subnets so that AWS can use them to create LBs
#  amazon.aws.ec2_vpc_subnet:
#  delegate_to: localhost
#    aws_access_key: "{{ ansible_env.AWS_ACCESS_KEY_ID | default(omit) }}"
#    aws_secret_key: "{{ ansible_env.AWS_SECRET_ACCESS_KEY | default(omit) }}"
#    security_token: "{{ ansible_env.AWS_SESSION_TOKEN | default(omit) }}"
#    region: "{{ aws_region }}"
#    ec2_url: "{{ cloudformation_endpoint }}"
#    validate_certs: "{{ aws_ssl_enabled }}"
#    state: present
#    vpc_id: vpc-123456
#    cidr: 10.0.1.16/28
#    tags:
#        - Key: "Name"
#          Value: !Join ["-", [!Ref InfrastructureName, "public", !Select [0, Fn::GetAZs: !Ref "AWS::Region"]]]
#        - Key: !Join ["", [kubernetes.io/cluster/, !Ref InfrastructureName]]
#          Value: owned
#  register: database_subnet

- name: Deploy bootstrap Cloudformation stack
  delegate_to: localhost
  amazon.aws.cloudformation:
    aws_access_key: "{{ ansible_env.AWS_ACCESS_KEY_ID | default(omit) }}"
    aws_secret_key: "{{ ansible_env.AWS_SECRET_ACCESS_KEY | default(omit) }}"
    security_token: "{{ ansible_env.AWS_SESSION_TOKEN | default(omit) }}"
    region: "{{ aws_region }}"
    ec2_url: "{{ cloudformation_endpoint }}"
    validate_certs: "{{ aws_ssl_enabled }}"
    stack_name: openshift4-bootstrap
    state: present
    disable_rollback: true
    create_timeout: 5
    template: "../cloudformation/c2s/NGA/04_cluster_bootstrap.yaml"
    template_parameters:
      ClusterName: "{{ ocp_cluster_name }}"
      InfrastructureName: "{{ infrastructure_id }}"
      RhcosAmi: "{{ rhcos_ami[rhcos_ver] }}"
      AllowedBootstrapCidr: '0.0.0.0/0'
      PublicSubnet: "{{ subnets[0].id }}"
      MasterSecurityGroupId: "{{ ec2_sg.master.id }}"
      VpcId: "{{ vpc_id }}"
      BootstrapIgnitionLocation: "http://{{ s3_bucket }}" # Need rest of link here
      InternalApiTargetGroupArn: "{{ internal_api_target_group_arn }}"
      InternalServiceTragetGroupArn: "{{ internap_service_target_group_arn }}"
      BootstrapInstanceProfileName: "{{ ec2_iam_role.bootstrap }}"
      IgnitionVersion: "{{ ign_ver[rhcos_ver] }}"
  register: bootstrap_stack_outputs
  tags:
    - bootstrap

- name: Show bootstrap stack output
  debug:
    var: bootstrap_stack_outputs
  tags:
    - bootstrap

# Ansible task for this doesn't work correctly in C2S do to some api version error
# This has not been combined with the loop below for the control plane to allow independent deployment of the boostrap node
- name: Add bootstrap node to the api target group
  delegate_to: localhost
  shell: aws --no-verify-ssl --endpoint-url "{{elb_endpoint}}" elbv2 register-targets --target-grou-arn "{{ internal_api_target_group_arn }}" --targets '{"Id":"{{ bootstrap_strap_outputs.stack_outputs.BootstrapPrivateIp }}"}'
  tags:
    - bootstrap

# Ansible task for this doesn't work correctly in C2S do to some api version error
# This has not been combined with the loop below for the control plane to allow independent deployment of the boostrap node
- name: Add bootstra node to the service api taget group
  delegate_to: localhost
  shell: aws --no-verify-ssl --endpoint-url "{{elb_endpoint}}" elbv2 register-targets --target-grou-arn "{{ internal_service_target_group_arn }}" --targets '{"Id":"{{ bootstrap_strap_outputs.stack_outputs.BootstrapPrivateIp }}"}'
  tags:
    - bootstrap

- name: Deploy control plane Cloudformation stack
  delegate_to: localhost
  amazon.aws.cloudformation:
    aws_access_key: "{{ ansible_env.AWS_ACCESS_KEY_ID | default(omit) }}"
    aws_secret_key: "{{ ansible_env.AWS_SECRET_ACCESS_KEY | default(omit) }}"
    security_token: "{{ ansible_env.AWS_SESSION_TOKEN | default(omit) }}"
    region: "{{ aws_region }}"
    ec2_url: "{{ cloudformation_endpoint }}"
    validate_certs: "{{ aws_ssl_enabled }}"
    stack_name: openshift4-control-plane
    state: present
    disable_rollback: true
    create_timeout: 5
    template: "../cloudformation/c2s/NGA/"
    template_parameters:
      ClusterName: "{{ ocp_cluster_name }}"
      InfrastructureName: "{{ infrastructure_id }}"
      RhcosAmi: "{{ rhcos_ami[rhcos_ver] }}"
      Master0Subnet: "{{ subnets[0].id }}"
      Master1Subnet: "{{ subnets[1].id }}"
      Master2Subnet: "{{ subnets[2].id }}"
      IgnitionLocation: "http://{{ s3_bucket }}" # Need rest of link here
      InternalApiTargetGroupArn: "{{ internal_api_target_group_arn }}"
      InternalServiceTargetGropArn: "{{ internap_service_target_group_arn }}"
      MasterInstanceProfileName: "{{ ec2_iam_role.master }}"
      IgnitionVersion: "{{ ign_ver[rhcos_ver] }}"
  register: master_stack_outputs
  tags:
    - masters

- name: show master stack output
  debug:
    var: master_stack_outputs
  tags:
    - masters

# Ansible task for this doesn't work correctly in C2S do to some api version error
- name: Add control plane nodes to api target group
  delegate_to: localhost
  shell: aws --no-verify-ssl --endpoint-url "{{elb_endpoint}}" elbv2 register-targets --target-grou-arn "{{ internal_api_target_group_arn }}" --targets '{"Id":"{{ item }}"}'
  loop:
    - "{{ master_stack_outputs.stack_outputs.Master0PrivateIp }}"
    - "{{ master_stack_outputs.stack_outputs.Master1PrivateIp }}"
    - "{{ master_stack_outputs.stack_outputs.Master2PrivateIp }}"
  tags:
    - masters

# Ansible task for this doesn't work correctly in C2S do to some api version error
- name: Add control plane nodes to service target group
  delegate_to: localhost
  shell: aws --no-verify-ssl --endpoint-url "{{elb_endpoint}}" elbv2 register-targets --target-grou-arn "{{ internal_service_target_group_arn }}" --targets '{"Id":"{{ item }}"}'
  loop:
    - "{{ master_stack_outputs.stack_outputs.Master0PrivateIp }}"
    - "{{ master_stack_outputs.stack_outputs.Master1PrivateIp }}"
    - "{{ master_stack_outputs.stack_outputs.Master2PrivateIp }}"
  tags:
    - masters

######## Not tested beyond this point
- name: Stop, not tested beyond this point
  fail:
    msg: "Not tested beyond this point"

- name: Deploy worker 0 cloudformation stack
  delegate_to: localhost
  amazon.aws.cloudformation:
    stack_name: openshift4-worker-0
    state: present
    region: "{{ aws_region }}"
    ec2_url: "{{ cloudformation_endpoint }}"
    validate_certs: "{{ aws_ssl_enabled }}"
    disable_rollback: true
    create_timeout: 5
    template: "../cloudformation/c2s/NGA/06_cluster_worker_node.yaml"
    template_parameters:
      ClusterName: "{{ ocp_cluster_name }}"
      InfrastructureName: "{{ infrastructure_id }}"
      RhcosAmi: "{{ rhcos_ami[rhcos_ver] }}"
      Subnet: "{{ subnets[0].id }}"
      IgnitionLocation: "http://{{ s3_bucket }}" # Need rest of link here
      WorkerSecurityGroupId: "{{ ec2_sg.worker.id }}"
      WorkerInstanceProfileName: "{{ ec2_iam_role.master }}"
      IgnitionVersion: "{{ ign_ver[rhcos_ver] }}"
  register: worker0_stack_outputs
  tags:
    - workers

- name: Deploy worker 1 cloudformation stack
  delegate_to: localhost
  amazon.aws.cloudformation:
    stack_name: openshift4-worker-1
    state: present
    region: "{{ aws_region }}"
    ec2_url: "{{ cloudformation_endpoint }}"
    validate_certs: "{{ aws_ssl_enabled }}"
    disable_rollback: true
    create_timeout: 5
    template: "../cloudformation/c2s/NGA/06_cluster_worker_node.yaml"
    template_parameters:
      ClusterName: "{{ ocp_cluster_name }}"
      InfrastructureName: "{{ infrastructure_id }}"
      RhcosAmi: "{{ rhcos_ami[rhcos_ver] }}"
      Subnet: "{{ subnets[1].id }}"
      IgnitionLocation: "http://{{ s3_bucket }}" # Need rest of link here
      WorkerSecurityGroupId: "{{ ec2_sg.worker.id }}"
      WorkerInstanceProfileName: "{{ ec2_iam_role.master }}"
      IgnitionVersion: "{{ ign_ver[rhcos_ver] }}"
  register: worker1_stack_outputs
  tags:
    - workers

- name: Deploy worker 2 cloudformation stack
  delegate_to: localhost
  amazon.aws.cloudformation:
    stack_name: openshift4-worker-2
    state: present
    region: "{{ aws_region }}"
    ec2_url: "{{ cloudformation_endpoint }}"
    validate_certs: "{{ aws_ssl_enabled }}"
    disable_rollback: true
    create_timeout: 5
    template: "../cloudformation/c2s/NGA/06_cluster_worker_node.yaml"
    template_parameters:
      ClusterName: "{{ ocp_cluster_name }}"
      InfrastructureName: "{{ infrastructure_id }}"
      RhcosAmi: "{{ rhcos_ami[rhcos_ver] }}"
      Subnet: "{{ subnets[2].id }}"
      IgnitionLocation: "http://{{ s3_bucket }}" # Need rest of link here
      WorkerSecurityGroupId: "{{ ec2_sg.worker.id }}"
      WorkerInstanceProfileName: "{{ ec2_iam_role.master }}"
      IgnitionVersion: "{{ ign_ver[rhcos_ver] }}"
  register: worker2_stack_outputs
  tags:
    - workers
