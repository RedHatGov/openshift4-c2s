---

- name: Get vpc stack info
  delegate_to: localhost
  amazon.aws.cloudformation_info:
    aws_access_key: "{{ ansible_env.AWS_ACCESS_KEY_ID | default(omit) }}"
    aws_secret_key: "{{ ansible_env.AWS_SECRET_ACCESS_KEY | default(omit) }}"
    security_token: "{{ ansible_env.AWS_SESSION_TOKEN | default(omit) }}"
    region: "{{ ansible_env.AWS_DEFAULT_REGION | default(omit) }}"
    #ec2_url: "{{ cloudformation_endpoint | default(omit) }}"
    validate_certs: "{{ aws_ssl_enabled }}"
    stack_name: "{{ vpc_stack_name }}"
    stack_resources: true
  register: cf_outputs
  failed_when: cf_outputs.cloudformation.openshift4vpc is undefined

- name: Set subnets to empty
  set_fact:
    vpc_id: "{{ cf_outputs.cloudformation.openshift4vpc.stack_outputs.VpcId }}"
    ec2_public_subnets: "{{ cf_outputs.cloudformation.openshift4vpc.stack_resources.PublicSubnet1 }}"
    ec2_private_subnets: "{{ cf_outputs.cloudformation.openshift4vpc.stack_resources.PrivateSubnet1 }}"
    private_subnets:
      - name: 'A'
        id: '{{ cf_outputs.cloudformation.openshift4vpc.stack_resources.PrivateSubnet1 }}'
        zone: 'A'
      - name: 'B'
        id: '{{ cf_outputs.cloudformation.openshift4vpc.stack_resources.PrivateSubnet2 }}'
        zone: 'B'
      - name: 'C'
        id: '{{ cf_outputs.cloudformation.openshift4vpc.stack_resources.PrivateSubnet3 }}'
        zone: 'C'
    public_subnets:
      - name: 'A'
        id: '{{ cf_outputs.cloudformation.openshift4vpc.stack_resources.PublicSubnet1 }}'
        zone: 'A'
      - name: 'B'
        id: '{{ cf_outputs.cloudformation.openshift4vpc.stack_resources.PublicSubnet2 }}'
        zone: 'B'
      - name: 'C'
        id: '{{ cf_outputs.cloudformation.openshift4vpc.stack_resources.PublicSubnet3 }}'
        zone: 'C'

- name: Add public subnet 2 if it exists
  set_fact:
    ec2_public_subnets: "{{ ec2_public_subnets }},{{ cf_outputs.cloudformation.openshift4vpc.stack_resources.PublicSubnet2 }}"
  when: cf_outputs.cloudformation.openshift4vpc.stack_resources.PublicSubnet2 is defined

- name: Add public subnet 3 if it exists
  set_fact:
    ec2_public_subnets: "{{ ec2_public_subnets }},{{ cf_outputs.cloudformation.openshift4vpc.stack_resources.PublicSubnet3 }}"
  when: cf_outputs.cloudformation.openshift4vpc.stack_resources.PublicSubnet3 is defined

- name: Add private subnet 2 if it exists
  set_fact:
    ec2_private_subnets: "{{ ec2_private_subnets }},{{ cf_outputs.cloudformation.openshift4vpc.stack_resources.PrivateSubnet2 }}"
  when: cf_outputs.cloudformation.openshift4vpc.stack_resources.PrivateSubnet2 is defined

- name: Add private subnet 3 if it exists
  set_fact:
    ec2_private_subnets: "{{ ec2_private_subnets }},{{ cf_outputs.cloudformation.openshift4vpc.stack_resources.PrivateSubnet3 }}"
  when: cf_outputs.cloudformation.openshift4vpc.stack_resources.PrivateSubnet3 is defined

- name: Set machine network cidr fact
  set_fact:
    machine_network_cidr: "{{ cf_outputs.cloudformation.openshift4vpc.stack_parameters.VpcCidr }}"

#- name: Show subnets
#  debug:
#    var: cf_outputs

#- fail:
#    msg: "fail"
